# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy application to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Change the image url from build stage to manifest file
#
#
# 3. Run kubectl with manifest file to run the deployment 
#
#
on:
  push:
    branches:
    - main
    paths:
    - 'app/**'
  workflow_dispatch:

name: Deploy to Amazon EKS
env:
  EKS_CLUSTER_NAME: lovebonito-eks-sfarhan
  KUBECONFIG_CLUSTER_NAME: lovebonito-eks-sfarhan

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lovebonito-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Go to application directory where Dockerfile is
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd app/
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Trigger deploy
      uses: GavinRay97/garden-eks-deploy-action@v1.0
      env:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ap-southeast-1
          cluster_name: $EKS_CLUSTER_NAME
          kubeconfig_cluster_name: $KUBECONFIG_CLUSTER_NAME
      with:
          # CD to the location of your project-level "garden.yml", if it's not in root
          # Export KUBECONFIG
          # Run the deploy
          args: |
            cd manifests/
            export KUBECONFIG=/github/home/.kube/config
            sed -ie 's,IMAGE_URL,'"${{ steps.build-image.outputs.image }}"',g' deployment.yaml
            kubectl apply -f .
